import * as _zk_kit_baby_jubjub from '@zk-kit/baby-jubjub';
import { Point } from '@zk-kit/baby-jubjub';
import * as _zk_kit_utils from '@zk-kit/utils';
import { BigNumber } from '@zk-kit/utils';

type Signature<N = BigNumber> = {
    R8: Point<N>;
    S: N;
};

declare const EdDSAPoseidon: {
    new (privateKey?: Buffer | Uint8Array | string): {
        privateKey: Buffer | Uint8Array | string;
        secretScalar: bigint;
        publicKey: _zk_kit_baby_jubjub.Point<bigint>;
        packedPublicKey: bigint;
        signMessage(message: _zk_kit_utils.BigNumberish): Signature<bigint>;
        verifySignature(message: _zk_kit_utils.BigNumberish, signature: Signature): boolean;
    };
};
declare const derivePublicKey: (privateKey: Buffer | Uint8Array | string) => _zk_kit_baby_jubjub.Point<bigint>;
declare const deriveSecretScalar: (privateKey: Buffer | Uint8Array | string) => bigint;
declare const packPublicKey: (publicKey: _zk_kit_baby_jubjub.Point) => bigint;
declare const packSignature: (signature: Signature) => Buffer;
declare const signMessage: (privateKey: Buffer | Uint8Array | string, message: _zk_kit_utils.BigNumberish) => Signature<bigint>;
declare const unpackPublicKey: (publicKey: _zk_kit_utils.BigNumberish) => _zk_kit_baby_jubjub.Point<bigint>;
declare const unpackSignature: (packedSignature: Buffer) => Signature<bigint>;
declare const verifySignature: (message: _zk_kit_utils.BigNumberish, signature: Signature, publicKey: _zk_kit_baby_jubjub.Point) => boolean;

export { EdDSAPoseidon, type Signature, derivePublicKey, deriveSecretScalar, packPublicKey, packSignature, signMessage, unpackPublicKey, unpackSignature, verifySignature };
